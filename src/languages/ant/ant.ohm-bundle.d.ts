// AUTOGENERATED FILE
// This file was generated from ant.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ProgramActionDict<T> extends BaseActionDict<T> {
  command?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  pixelToCommand?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  absolutePixelToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  absolutePixelToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativePixelToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativePixelToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  coordinatePairSequence_recursive?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  coordinatePairSequence_single?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinatePairSequence?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinatePair?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  coordinate?: (this: NonterminalNode, arg0: IterationNode) => T;
  coordinateSeparator_space?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: IterationNode) => T;
  coordinateSeparator_comma?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  coordinateSeparator?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  integer?: (this: NonterminalNode, arg0: IterationNode) => T;
}

export interface ProgramSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
}

export interface ProgramGrammar extends Grammar {
  createSemantics(): ProgramSemantics;
  extendSemantics(superSemantics: ProgramSemantics): ProgramSemantics;
}

declare const grammar: ProgramGrammar;
export default grammar;

