// AUTOGENERATED FILE
// This file was generated from butterfly.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ProgramActionDict<T> extends BaseActionDict<T> {
  command?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: IterationNode, arg3: IterationNode, arg4: IterationNode) => T;
  drawToCommand?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  absoluteEllipticalArcCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  absoluteEllipticalArcToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativeEllipticalArcCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativeEllipticalArcToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ellipticalArcArgumentSequence_single?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ellipticalArcArgumentSequence_recursive?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  ellipticalArcArgumentSequence?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ellipticalArcArgument?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode, arg5: IterationNode, arg6: NonterminalNode, arg7: IterationNode, arg8: NonterminalNode) => T;
  absoluteClosePathToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativeClosePathToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  absoluteLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  absoluteLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativeLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativeLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  absoluteVerticalLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  absoluteVerticalLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativeVerticalLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativeVerticalLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  absoluteHorizontalLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  absoluteHorizontalLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  relativeHorizontalLineToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativeHorizontalLineToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  moveToCommand?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  moveToToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  coordinatePairSequence_recursive?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  coordinatePairSequence_single?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinatePairSequence?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinateSequence_recursive?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  coordinateSequence_single?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinateSequence?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  coordinatePair?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  relativeNumber?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  coordinateSeparator_space?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: IterationNode) => T;
  coordinateSeparator_comma?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  coordinateSeparator?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  sign?: (this: NonterminalNode, arg0: TerminalNode) => T;
  flag?: (this: NonterminalNode, arg0: TerminalNode) => T;
  number_decimal?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_integer?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface ProgramSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ProgramActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ProgramActionDict<T>): this;
}

export interface ProgramGrammar extends Grammar {
  createSemantics(): ProgramSemantics;
  extendSemantics(superSemantics: ProgramSemantics): ProgramSemantics;
}

declare const grammar: ProgramGrammar;
export default grammar;

